/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.utils.generated.tables;


import java.util.Arrays;
import java.util.List;

import com.github.liamvii.penandpaper.utils.generated.Indexes;
import com.github.liamvii.penandpaper.utils.generated.Keys;
import com.github.liamvii.penandpaper.utils.generated.Penandpaper;
import com.github.liamvii.penandpaper.utils.generated.tables.records.ProfessionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Professions extends TableImpl<ProfessionsRecord> {

    private static final long serialVersionUID = -443940431;

    /**
     * The reference instance of <code>penandpaper.professions</code>
     */
    public static final Professions PROFESSIONS = new Professions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfessionsRecord> getRecordType() {
        return ProfessionsRecord.class;
    }

    /**
     * The column <code>penandpaper.professions.ProfessionID</code>.
     */
    public final TableField<ProfessionsRecord, String> PROFESSIONID = createField(DSL.name("ProfessionID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.professions.CharacterID</code>.
     */
    public final TableField<ProfessionsRecord, String> CHARACTERID = createField(DSL.name("CharacterID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.professions.profession</code>.
     */
    public final TableField<ProfessionsRecord, String> PROFESSION = createField(DSL.name("profession"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.professions.level</code>.
     */
    public final TableField<ProfessionsRecord, String> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>penandpaper.professions</code> table reference
     */
    public Professions() {
        this(DSL.name("professions"), null);
    }

    /**
     * Create an aliased <code>penandpaper.professions</code> table reference
     */
    public Professions(String alias) {
        this(DSL.name(alias), PROFESSIONS);
    }

    /**
     * Create an aliased <code>penandpaper.professions</code> table reference
     */
    public Professions(Name alias) {
        this(alias, PROFESSIONS);
    }

    private Professions(Name alias, Table<ProfessionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Professions(Name alias, Table<ProfessionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Professions(Table<O> child, ForeignKey<O, ProfessionsRecord> key) {
        super(child, key, PROFESSIONS);
    }

    @Override
    public Schema getSchema() {
        return Penandpaper.PENANDPAPER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROFESSIONS_FKIDX_46);
    }

    @Override
    public UniqueKey<ProfessionsRecord> getPrimaryKey() {
        return Keys.KEY_PROFESSIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProfessionsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfessionsRecord>>asList(Keys.KEY_PROFESSIONS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ProfessionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProfessionsRecord, ?>>asList(Keys.FK_46);
    }

    public Characters characters() {
        return new Characters(this, Keys.FK_46);
    }

    @Override
    public Professions as(String alias) {
        return new Professions(DSL.name(alias), this);
    }

    @Override
    public Professions as(Name alias) {
        return new Professions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Professions rename(String name) {
        return new Professions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Professions rename(Name name) {
        return new Professions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
