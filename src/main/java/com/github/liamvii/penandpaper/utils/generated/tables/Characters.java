/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.utils.generated.tables;


import java.util.Arrays;
import java.util.List;

import com.github.liamvii.penandpaper.utils.generated.Indexes;
import com.github.liamvii.penandpaper.utils.generated.Keys;
import com.github.liamvii.penandpaper.utils.generated.Penandpaper;
import com.github.liamvii.penandpaper.utils.generated.tables.records.CharactersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Characters extends TableImpl<CharactersRecord> {

    private static final long serialVersionUID = 219763180;

    /**
     * The reference instance of <code>penandpaper.characters</code>
     */
    public static final Characters CHARACTERS = new Characters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharactersRecord> getRecordType() {
        return CharactersRecord.class;
    }

    /**
     * The column <code>penandpaper.characters.CharacterID</code>.
     */
    public final TableField<CharactersRecord, String> CHARACTERID = createField(DSL.name("CharacterID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.UUID</code>.
     */
    public final TableField<CharactersRecord, String> UUID = createField(DSL.name("UUID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.FirstName</code>.
     */
    public final TableField<CharactersRecord, String> FIRSTNAME = createField(DSL.name("FirstName"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.FamilyName</code>.
     */
    public final TableField<CharactersRecord, String> FAMILYNAME = createField(DSL.name("FamilyName"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.age</code>.
     */
    public final TableField<CharactersRecord, String> AGE = createField(DSL.name("age"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.height</code>.
     */
    public final TableField<CharactersRecord, String> HEIGHT = createField(DSL.name("height"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.weight</code>.
     */
    public final TableField<CharactersRecord, String> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.appearance</code>.
     */
    public final TableField<CharactersRecord, String> APPEARANCE = createField(DSL.name("appearance"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.presence</code>.
     */
    public final TableField<CharactersRecord, String> PRESENCE = createField(DSL.name("presence"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.strength</code>.
     */
    public final TableField<CharactersRecord, String> STRENGTH = createField(DSL.name("strength"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.dexterity</code>.
     */
    public final TableField<CharactersRecord, String> DEXTERITY = createField(DSL.name("dexterity"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.constitution</code>.
     */
    public final TableField<CharactersRecord, String> CONSTITUTION = createField(DSL.name("constitution"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.intelligence</code>.
     */
    public final TableField<CharactersRecord, String> INTELLIGENCE = createField(DSL.name("intelligence"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.wisdom</code>.
     */
    public final TableField<CharactersRecord, String> WISDOM = createField(DSL.name("wisdom"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.charisma</code>.
     */
    public final TableField<CharactersRecord, String> CHARISMA = createField(DSL.name("charisma"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characters.experience</code>.
     */
    public final TableField<CharactersRecord, String> EXPERIENCE = createField(DSL.name("experience"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>penandpaper.characters</code> table reference
     */
    public Characters() {
        this(DSL.name("characters"), null);
    }

    /**
     * Create an aliased <code>penandpaper.characters</code> table reference
     */
    public Characters(String alias) {
        this(DSL.name(alias), CHARACTERS);
    }

    /**
     * Create an aliased <code>penandpaper.characters</code> table reference
     */
    public Characters(Name alias) {
        this(alias, CHARACTERS);
    }

    private Characters(Name alias, Table<CharactersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Characters(Name alias, Table<CharactersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Characters(Table<O> child, ForeignKey<O, CharactersRecord> key) {
        super(child, key, CHARACTERS);
    }

    @Override
    public Schema getSchema() {
        return Penandpaper.PENANDPAPER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHARACTERS_FKIDX_18);
    }

    @Override
    public UniqueKey<CharactersRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CharactersRecord>> getKeys() {
        return Arrays.<UniqueKey<CharactersRecord>>asList(Keys.KEY_CHARACTERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<CharactersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CharactersRecord, ?>>asList(Keys.FK_18);
    }

    public Characterholders characterholders() {
        return new Characterholders(this, Keys.FK_18);
    }

    @Override
    public Characters as(String alias) {
        return new Characters(DSL.name(alias), this);
    }

    @Override
    public Characters as(Name alias) {
        return new Characters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Characters rename(String name) {
        return new Characters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Characters rename(Name name) {
        return new Characters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
