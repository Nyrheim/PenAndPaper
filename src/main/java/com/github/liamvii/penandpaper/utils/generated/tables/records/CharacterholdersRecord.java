/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.utils.generated.tables.records;


import com.github.liamvii.penandpaper.utils.generated.tables.Characterholders;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharacterholdersRecord extends UpdatableRecordImpl<CharacterholdersRecord> implements Record2<String, String> {

    private static final long serialVersionUID = -1840292693;

    /**
     * Setter for <code>penandpaper.characterholders.UUID</code>.
     */
    public CharacterholdersRecord setUuid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>penandpaper.characterholders.UUID</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>penandpaper.characterholders.dutymode</code>.
     */
    public CharacterholdersRecord setDutymode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>penandpaper.characterholders.dutymode</code>.
     */
    public String getDutymode() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Characterholders.CHARACTERHOLDERS.UUID;
    }

    @Override
    public Field<String> field2() {
        return Characterholders.CHARACTERHOLDERS.DUTYMODE;
    }

    @Override
    public String component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getDutymode();
    }

    @Override
    public String value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getDutymode();
    }

    @Override
    public CharacterholdersRecord value1(String value) {
        setUuid(value);
        return this;
    }

    @Override
    public CharacterholdersRecord value2(String value) {
        setDutymode(value);
        return this;
    }

    @Override
    public CharacterholdersRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CharacterholdersRecord
     */
    public CharacterholdersRecord() {
        super(Characterholders.CHARACTERHOLDERS);
    }

    /**
     * Create a detached, initialised CharacterholdersRecord
     */
    public CharacterholdersRecord(String uuid, String dutymode) {
        super(Characterholders.CHARACTERHOLDERS);

        set(0, uuid);
        set(1, dutymode);
    }
}
