/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.utils.generated.tables;


import java.util.Arrays;
import java.util.List;

import com.github.liamvii.penandpaper.utils.generated.Indexes;
import com.github.liamvii.penandpaper.utils.generated.Keys;
import com.github.liamvii.penandpaper.utils.generated.Penandpaper;
import com.github.liamvii.penandpaper.utils.generated.tables.records.JobsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jobs extends TableImpl<JobsRecord> {

    private static final long serialVersionUID = 13688753;

    /**
     * The reference instance of <code>penandpaper.jobs</code>
     */
    public static final Jobs JOBS = new Jobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobsRecord> getRecordType() {
        return JobsRecord.class;
    }

    /**
     * The column <code>penandpaper.jobs.jobID</code>.
     */
    public final TableField<JobsRecord, String> JOBID = createField(DSL.name("jobID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.jobs.CharacterID</code>.
     */
    public final TableField<JobsRecord, String> CHARACTERID = createField(DSL.name("CharacterID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.jobs.job</code>.
     */
    public final TableField<JobsRecord, String> JOB = createField(DSL.name("job"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.jobs.level</code>.
     */
    public final TableField<JobsRecord, String> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>penandpaper.jobs</code> table reference
     */
    public Jobs() {
        this(DSL.name("jobs"), null);
    }

    /**
     * Create an aliased <code>penandpaper.jobs</code> table reference
     */
    public Jobs(String alias) {
        this(DSL.name(alias), JOBS);
    }

    /**
     * Create an aliased <code>penandpaper.jobs</code> table reference
     */
    public Jobs(Name alias) {
        this(alias, JOBS);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Jobs(Table<O> child, ForeignKey<O, JobsRecord> key) {
        super(child, key, JOBS);
    }

    @Override
    public Schema getSchema() {
        return Penandpaper.PENANDPAPER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOBS_FKIDX_41);
    }

    @Override
    public UniqueKey<JobsRecord> getPrimaryKey() {
        return Keys.KEY_JOBS_PRIMARY;
    }

    @Override
    public List<UniqueKey<JobsRecord>> getKeys() {
        return Arrays.<UniqueKey<JobsRecord>>asList(Keys.KEY_JOBS_PRIMARY);
    }

    @Override
    public List<ForeignKey<JobsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobsRecord, ?>>asList(Keys.FK_41);
    }

    public Characters characters() {
        return new Characters(this, Keys.FK_41);
    }

    @Override
    public Jobs as(String alias) {
        return new Jobs(DSL.name(alias), this);
    }

    @Override
    public Jobs as(Name alias) {
        return new Jobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(String name) {
        return new Jobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(Name name) {
        return new Jobs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
