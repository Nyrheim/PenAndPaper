/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.utils.generated.tables;


import java.util.Arrays;
import java.util.List;

import com.github.liamvii.penandpaper.utils.generated.Keys;
import com.github.liamvii.penandpaper.utils.generated.Penandpaper;
import com.github.liamvii.penandpaper.utils.generated.tables.records.CharacterholdersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Characterholders extends TableImpl<CharacterholdersRecord> {

    private static final long serialVersionUID = 1329039208;

    /**
     * The reference instance of <code>penandpaper.characterholders</code>
     */
    public static final Characterholders CHARACTERHOLDERS = new Characterholders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterholdersRecord> getRecordType() {
        return CharacterholdersRecord.class;
    }

    /**
     * The column <code>penandpaper.characterholders.UUID</code>.
     */
    public final TableField<CharacterholdersRecord, String> UUID = createField(DSL.name("UUID"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>penandpaper.characterholders.dutymode</code>.
     */
    public final TableField<CharacterholdersRecord, String> DUTYMODE = createField(DSL.name("dutymode"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>penandpaper.characterholders</code> table reference
     */
    public Characterholders() {
        this(DSL.name("characterholders"), null);
    }

    /**
     * Create an aliased <code>penandpaper.characterholders</code> table reference
     */
    public Characterholders(String alias) {
        this(DSL.name(alias), CHARACTERHOLDERS);
    }

    /**
     * Create an aliased <code>penandpaper.characterholders</code> table reference
     */
    public Characterholders(Name alias) {
        this(alias, CHARACTERHOLDERS);
    }

    private Characterholders(Name alias, Table<CharacterholdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Characterholders(Name alias, Table<CharacterholdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Characterholders(Table<O> child, ForeignKey<O, CharacterholdersRecord> key) {
        super(child, key, CHARACTERHOLDERS);
    }

    @Override
    public Schema getSchema() {
        return Penandpaper.PENANDPAPER;
    }

    @Override
    public UniqueKey<CharacterholdersRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTERHOLDERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CharacterholdersRecord>> getKeys() {
        return Arrays.<UniqueKey<CharacterholdersRecord>>asList(Keys.KEY_CHARACTERHOLDERS_PRIMARY);
    }

    @Override
    public Characterholders as(String alias) {
        return new Characterholders(DSL.name(alias), this);
    }

    @Override
    public Characterholders as(Name alias) {
        return new Characterholders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Characterholders rename(String name) {
        return new Characterholders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Characterholders rename(Name name) {
        return new Characterholders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
