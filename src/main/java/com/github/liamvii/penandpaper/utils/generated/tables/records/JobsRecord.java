/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.utils.generated.tables.records;


import com.github.liamvii.penandpaper.utils.generated.tables.Jobs;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobsRecord extends UpdatableRecordImpl<JobsRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 706343053;

    /**
     * Setter for <code>penandpaper.jobs.jobID</code>.
     */
    public JobsRecord setJobid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>penandpaper.jobs.jobID</code>.
     */
    public String getJobid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>penandpaper.jobs.CharacterID</code>.
     */
    public JobsRecord setCharacterid(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>penandpaper.jobs.CharacterID</code>.
     */
    public String getCharacterid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>penandpaper.jobs.job</code>.
     */
    public JobsRecord setJob(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>penandpaper.jobs.job</code>.
     */
    public String getJob() {
        return (String) get(2);
    }

    /**
     * Setter for <code>penandpaper.jobs.level</code>.
     */
    public JobsRecord setLevel(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>penandpaper.jobs.level</code>.
     */
    public String getLevel() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Jobs.JOBS.JOBID;
    }

    @Override
    public Field<String> field2() {
        return Jobs.JOBS.CHARACTERID;
    }

    @Override
    public Field<String> field3() {
        return Jobs.JOBS.JOB;
    }

    @Override
    public Field<String> field4() {
        return Jobs.JOBS.LEVEL;
    }

    @Override
    public String component1() {
        return getJobid();
    }

    @Override
    public String component2() {
        return getCharacterid();
    }

    @Override
    public String component3() {
        return getJob();
    }

    @Override
    public String component4() {
        return getLevel();
    }

    @Override
    public String value1() {
        return getJobid();
    }

    @Override
    public String value2() {
        return getCharacterid();
    }

    @Override
    public String value3() {
        return getJob();
    }

    @Override
    public String value4() {
        return getLevel();
    }

    @Override
    public JobsRecord value1(String value) {
        setJobid(value);
        return this;
    }

    @Override
    public JobsRecord value2(String value) {
        setCharacterid(value);
        return this;
    }

    @Override
    public JobsRecord value3(String value) {
        setJob(value);
        return this;
    }

    @Override
    public JobsRecord value4(String value) {
        setLevel(value);
        return this;
    }

    @Override
    public JobsRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JobsRecord
     */
    public JobsRecord() {
        super(Jobs.JOBS);
    }

    /**
     * Create a detached, initialised JobsRecord
     */
    public JobsRecord(String jobid, String characterid, String job, String level) {
        super(Jobs.JOBS);

        set(0, jobid);
        set(1, characterid);
        set(2, job);
        set(3, level);
    }
}
