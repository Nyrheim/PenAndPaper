/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.database.jooq.tables.records;


import com.github.liamvii.penandpaper.database.jooq.tables.ActiveCharacter;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActiveCharacterRecord extends UpdatableRecordImpl<ActiveCharacterRecord> implements Record2<String, Integer> {

    private static final long serialVersionUID = -441647293;

    /**
     * Setter for <code>nyrheim.active_character.player_uuid</code>.
     */
    public void setPlayerUuid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>nyrheim.active_character.player_uuid</code>.
     */
    public String getPlayerUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>nyrheim.active_character.character_id</code>.
     */
    public void setCharacterId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>nyrheim.active_character.character_id</code>.
     */
    public Integer getCharacterId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ActiveCharacter.ACTIVE_CHARACTER.PLAYER_UUID;
    }

    @Override
    public Field<Integer> field2() {
        return ActiveCharacter.ACTIVE_CHARACTER.CHARACTER_ID;
    }

    @Override
    public String component1() {
        return getPlayerUuid();
    }

    @Override
    public Integer component2() {
        return getCharacterId();
    }

    @Override
    public String value1() {
        return getPlayerUuid();
    }

    @Override
    public Integer value2() {
        return getCharacterId();
    }

    @Override
    public ActiveCharacterRecord value1(String value) {
        setPlayerUuid(value);
        return this;
    }

    @Override
    public ActiveCharacterRecord value2(Integer value) {
        setCharacterId(value);
        return this;
    }

    @Override
    public ActiveCharacterRecord values(String value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ActiveCharacterRecord
     */
    public ActiveCharacterRecord() {
        super(ActiveCharacter.ACTIVE_CHARACTER);
    }

    /**
     * Create a detached, initialised ActiveCharacterRecord
     */
    public ActiveCharacterRecord(String playerUuid, Integer characterId) {
        super(ActiveCharacter.ACTIVE_CHARACTER);

        set(0, playerUuid);
        set(1, characterId);
    }
}
