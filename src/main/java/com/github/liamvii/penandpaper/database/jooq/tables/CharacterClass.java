/*
 * This file is generated by jOOQ.
 */
package com.github.liamvii.penandpaper.database.jooq.tables;


import com.github.liamvii.penandpaper.database.jooq.Keys;
import com.github.liamvii.penandpaper.database.jooq.Nyrheim;
import com.github.liamvii.penandpaper.database.jooq.tables.records.CharacterClassRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharacterClass extends TableImpl<CharacterClassRecord> {

    private static final long serialVersionUID = -363036101;

    /**
     * The reference instance of <code>nyrheim.character_class</code>
     */
    public static final CharacterClass CHARACTER_CLASS = new CharacterClass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterClassRecord> getRecordType() {
        return CharacterClassRecord.class;
    }

    /**
     * The column <code>nyrheim.character_class.character_id</code>.
     */
    public final TableField<CharacterClassRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>nyrheim.character_class.class_name</code>.
     */
    public final TableField<CharacterClassRecord, String> CLASS_NAME = createField(DSL.name("class_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>nyrheim.character_class.level</code>.
     */
    public final TableField<CharacterClassRecord, Integer> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>nyrheim.character_class</code> table reference
     */
    public CharacterClass() {
        this(DSL.name("character_class"), null);
    }

    /**
     * Create an aliased <code>nyrheim.character_class</code> table reference
     */
    public CharacterClass(String alias) {
        this(DSL.name(alias), CHARACTER_CLASS);
    }

    /**
     * Create an aliased <code>nyrheim.character_class</code> table reference
     */
    public CharacterClass(Name alias) {
        this(alias, CHARACTER_CLASS);
    }

    private CharacterClass(Name alias, Table<CharacterClassRecord> aliased) {
        this(alias, aliased, null);
    }

    private CharacterClass(Name alias, Table<CharacterClassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CharacterClass(Table<O> child, ForeignKey<O, CharacterClassRecord> key) {
        super(child, key, CHARACTER_CLASS);
    }

    @Override
    public Schema getSchema() {
        return Nyrheim.NYRHEIM;
    }

    @Override
    public UniqueKey<CharacterClassRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTER_CLASS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CharacterClassRecord>> getKeys() {
        return Arrays.<UniqueKey<CharacterClassRecord>>asList(Keys.KEY_CHARACTER_CLASS_PRIMARY);
    }

    @Override
    public List<ForeignKey<CharacterClassRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CharacterClassRecord, ?>>asList(Keys.CHARACTER_CLASS_CHARACTER_ID_FK);
    }

    public Character character() {
        return new Character(this, Keys.CHARACTER_CLASS_CHARACTER_ID_FK);
    }

    @Override
    public CharacterClass as(String alias) {
        return new CharacterClass(DSL.name(alias), this);
    }

    @Override
    public CharacterClass as(Name alias) {
        return new CharacterClass(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterClass rename(String name) {
        return new CharacterClass(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterClass rename(Name name) {
        return new CharacterClass(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
