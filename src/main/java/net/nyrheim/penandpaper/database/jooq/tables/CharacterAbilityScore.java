/*
 * This file is generated by jOOQ.
 */
package net.nyrheim.penandpaper.database.jooq.tables;


import net.nyrheim.penandpaper.database.jooq.Keys;
import net.nyrheim.penandpaper.database.jooq.Nyrheim;
import net.nyrheim.penandpaper.database.jooq.tables.records.CharacterAbilityScoreRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharacterAbilityScore extends TableImpl<CharacterAbilityScoreRecord> {

    private static final long serialVersionUID = -424568615;

    /**
     * The reference instance of <code>nyrheim.character_ability_score</code>
     */
    public static final CharacterAbilityScore CHARACTER_ABILITY_SCORE = new CharacterAbilityScore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterAbilityScoreRecord> getRecordType() {
        return CharacterAbilityScoreRecord.class;
    }

    /**
     * The column <code>nyrheim.character_ability_score.character_id</code>.
     */
    public final TableField<CharacterAbilityScoreRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>nyrheim.character_ability_score.ability</code>.
     */
    public final TableField<CharacterAbilityScoreRecord, String> ABILITY = createField(DSL.name("ability"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>nyrheim.character_ability_score.score</code>.
     */
    public final TableField<CharacterAbilityScoreRecord, Integer> SCORE = createField(DSL.name("score"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>nyrheim.character_ability_score</code> table reference
     */
    public CharacterAbilityScore() {
        this(DSL.name("character_ability_score"), null);
    }

    /**
     * Create an aliased <code>nyrheim.character_ability_score</code> table reference
     */
    public CharacterAbilityScore(String alias) {
        this(DSL.name(alias), CHARACTER_ABILITY_SCORE);
    }

    /**
     * Create an aliased <code>nyrheim.character_ability_score</code> table reference
     */
    public CharacterAbilityScore(Name alias) {
        this(alias, CHARACTER_ABILITY_SCORE);
    }

    private CharacterAbilityScore(Name alias, Table<CharacterAbilityScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private CharacterAbilityScore(Name alias, Table<CharacterAbilityScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CharacterAbilityScore(Table<O> child, ForeignKey<O, CharacterAbilityScoreRecord> key) {
        super(child, key, CHARACTER_ABILITY_SCORE);
    }

    @Override
    public Schema getSchema() {
        return Nyrheim.NYRHEIM;
    }

    @Override
    public UniqueKey<CharacterAbilityScoreRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTER_ABILITY_SCORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CharacterAbilityScoreRecord>> getKeys() {
        return Arrays.<UniqueKey<CharacterAbilityScoreRecord>>asList(Keys.KEY_CHARACTER_ABILITY_SCORE_PRIMARY);
    }

    @Override
    public List<ForeignKey<CharacterAbilityScoreRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CharacterAbilityScoreRecord, ?>>asList(Keys.CHARACTER_ABILITY_SCORE_CHARACTER_ID_FK);
    }

    public Character character() {
        return new Character(this, Keys.CHARACTER_ABILITY_SCORE_CHARACTER_ID_FK);
    }

    @Override
    public CharacterAbilityScore as(String alias) {
        return new CharacterAbilityScore(DSL.name(alias), this);
    }

    @Override
    public CharacterAbilityScore as(Name alias) {
        return new CharacterAbilityScore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterAbilityScore rename(String name) {
        return new CharacterAbilityScore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CharacterAbilityScore rename(Name name) {
        return new CharacterAbilityScore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
