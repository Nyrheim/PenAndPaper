/*
 * This file is generated by jOOQ.
 */
package net.nyrheim.penandpaper.database.jooq.tables.records;


import net.nyrheim.penandpaper.database.jooq.tables.Player;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerRecord extends UpdatableRecordImpl<PlayerRecord> implements Record4<Integer, String, byte[], byte[]> {

    private static final long serialVersionUID = -2061203745;

    /**
     * Setter for <code>nyrheim.player.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>nyrheim.player.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>nyrheim.player.player_uuid</code>.
     */
    public void setPlayerUuid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>nyrheim.player.player_uuid</code>.
     */
    public String getPlayerUuid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>nyrheim.player.password_hash</code>.
     */
    public void setPasswordHash(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>nyrheim.player.password_hash</code>.
     */
    public byte[] getPasswordHash() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>nyrheim.player.password_salt</code>.
     */
    public void setPasswordSalt(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>nyrheim.player.password_salt</code>.
     */
    public byte[] getPasswordSalt() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, byte[], byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, byte[], byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Player.PLAYER.ID;
    }

    @Override
    public Field<String> field2() {
        return Player.PLAYER.PLAYER_UUID;
    }

    @Override
    public Field<byte[]> field3() {
        return Player.PLAYER.PASSWORD_HASH;
    }

    @Override
    public Field<byte[]> field4() {
        return Player.PLAYER.PASSWORD_SALT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPlayerUuid();
    }

    @Override
    public byte[] component3() {
        return getPasswordHash();
    }

    @Override
    public byte[] component4() {
        return getPasswordSalt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPlayerUuid();
    }

    @Override
    public byte[] value3() {
        return getPasswordHash();
    }

    @Override
    public byte[] value4() {
        return getPasswordSalt();
    }

    @Override
    public PlayerRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PlayerRecord value2(String value) {
        setPlayerUuid(value);
        return this;
    }

    @Override
    public PlayerRecord value3(byte[] value) {
        setPasswordHash(value);
        return this;
    }

    @Override
    public PlayerRecord value4(byte[] value) {
        setPasswordSalt(value);
        return this;
    }

    @Override
    public PlayerRecord values(Integer value1, String value2, byte[] value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlayerRecord
     */
    public PlayerRecord() {
        super(Player.PLAYER);
    }

    /**
     * Create a detached, initialised PlayerRecord
     */
    public PlayerRecord(Integer id, String playerUuid, byte[] passwordHash, byte[] passwordSalt) {
        super(Player.PLAYER);

        set(0, id);
        set(1, playerUuid);
        set(2, passwordHash);
        set(3, passwordSalt);
    }
}
